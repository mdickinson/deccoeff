# Integer square root for numbers in [2**58, 2**60)

def sqrt_nearest(n):
    """Nearest integer to the square root of n."""
    a, b = n, 0
    while a != b:
        a, b = a--n//a>>1, a
    return a

def sqrt_floor(n):
    a, b = n, 0
    while a != b:
        a, b = a--n//a>>1, a
    return a if a*a <= n else a-1

# lookup[i] = nearest integer to the square root of (i+64.5)*2**52

lookup = [
    538963984, 543125930, 547256224, 551355579, 555424679, 559464185,
    563474732, 567456935, 571411387, 575338659, 579239305, 583113858,
    586962837, 590786739, 594586050, 598361237, 602112755, 605841043,
    609546528, 613229622, 616890727, 620530231, 624148514, 627745942,
    631322871, 634879647, 638416609, 641934082, 645432386, 648911832,
    652372719, 655815343, 659239990, 662646937, 666036458, 669408816,
    672764270, 676103071, 679425464, 682731691, 686021983, 689296569,
    692555673, 695799511, 699028297, 702242237, 705441535, 708626388,
    711796992, 714953535, 718096203, 721225178, 724340636, 727442751,
    730531694, 733607630, 736670724, 739721133, 742759015, 745784522,
    748797806, 751799011, 754788283, 757765764, 760731590, 763685899,
    766628822, 769560492, 772481036, 775390579, 778289246, 781177156,
    784054430, 786921183, 789777531, 792623585, 795459457, 798285254,
    801101084, 803907051, 806703258, 809489806, 812266794, 815034321,
    817792483, 820541373, 823281084, 826011709, 828733337, 831446055,
    834149952, 836845112, 839531620, 842209559, 844879010, 847540052,
    850192766, 852837229, 855473518, 858101707, 860721871, 863334083,
    865938415, 868534937, 871123721, 873704834, 876278344, 878844318,
    881402823, 883953922, 886497679, 889034158, 891563421, 894085529,
    896600543, 899108521, 901609523, 904103607, 906590829, 909071247,
    911544915, 914011888, 916472220, 918925966, 921373176, 923813904,
    926248201, 928676116, 931097701, 933513004, 935922073, 938324958,
    940721705, 943112361, 945496973, 947875586, 950248244, 952614993,
    954975876, 957330938, 959680220, 962023764, 964361614, 966693810,
    969020393, 971341403, 973656881, 975966865, 978271394, 980570508,
    982864243, 985152638, 987435729, 989713554, 991986148, 994253548,
    996515789, 998772906, 1001024933, 1003271906, 1005513857, 1007750820,
    1009982829, 1012209917, 1014432114, 1016649455, 1018861970, 1021069691,
    1023272649, 1025470874, 1027664397, 1029853248, 1032037457, 1034217052,
    1036392064, 1038562521, 1040728452, 1042889884, 1045046846, 1047199365,
    1049347468, 1051491183, 1053630537, 1055765555, 1057896265, 1060022692,
    1062144861, 1064262799, 1066376531, 1068486081, 1070591474, 1072692735
]

def sqrt_twolimb_normalized(n, _lookup=lookup):
    """Return the integer square root of a number in range(2**58, 2**60)."""
    # lookup, two iterations of Newton, and a correction
    a = _lookup[(n >> 52) - 64]
    a = a + n//a >> 1
    a = a + n//a >> 1
    return a if a*a <= n else a-1


from random import randrange
from time import time
trials = 1000000

trial_nums = [randrange(2**58, 2**60) for i in xrange(trials)]

t1 = time()
r1 = [sqrt_twolimb_normalized(x) for x in trial_nums]
t1 = time() - t1

t2 = time()
r2 = [sqrt_floor(x) for x in trial_nums]
t2 = time() - t2

print "Timings (new, old): ",t1, t2
